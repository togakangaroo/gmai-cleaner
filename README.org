This is a program intended to be used in a personal capacity to clean your gmail.

I personally have a problem where I am on some sort of spam list that sends me 3-10 emails per day for someone named "Grace" that contain just a single image. There is no good way to filter these directly in gmail.

Well, I know python and I have a Raspberry Pi so I guess I can just write a script to clean my gmail occasionally

As most of my small projects nowadays I use an ai chatbot for the coding assist (who even wants to look up API details?) I'm going to keep track of them here.
* Setup
  #+begin_src emacs-lisp :results silent
  (async-shell-command "pyenv exec poetry install")
  #+end_src
* Code
  :PROPERTIES:
  :header-args:python: :python "pyenv exec poetry run python"
  :header-args:python+: :noweb strip-exports :comments link
  :END:
  
** Playground
   :PROPERTIES:
   :header-args:python+: :session gmail-cleaner
   :END:
  
   Can all the things from the ai-generated script even be imported?
   #+begin_src python :results silent
   import os
   import base64
   from datetime import datetime, timedelta
   from google.oauth2.credentials import Credentials
   from googleapiclient.errors import HttpError
   from googleapiclient.discovery import build
   import google.oauth2
   import json
   #+end_src

 Ok good

 Now lets try this out
 #+begin_src python :results silent
   import os
   import google_auth_oauthlib.flow
  
   os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'
  
   client_secret_file = '.credentials/client_secret_771558906441-rt222sgbqf9rdresq9jebuj9gqqeh6i6.apps.googleusercontent.com.json'
   scopes = ['https://www.googleapis.com/auth/gmail.modify']
  
   flow = google_auth_oauthlib.flow.InstalledAppFlow.from_client_secrets_file(client_secret_file, scopes)
   credentials = flow.run_local_server(port=0)
 #+end_src


 #+begin_src python
   service = build('gmail', 'v1', credentials=credentials)
  
   today = datetime.today()
   search_window = today - timedelta(days=7)
   query = 'is:unread after:{} before:{} has:attachment'.format(search_window.strftime('%Y/%m/%d'), today.strftime('%Y/%m/%d'))
  
   response = service.users().messages().list(userId='me', q=query).execute()
   messages = response.get('messages', [])
   message = messages[0]
   msg = service.users().messages().get(userId='me', id=message['id']).execute()
   msg['snippet']
 #+end_src

 #+RESULTS:
 : Ihor Radchenko &lt;yantar92@posteo.net&gt; writes: &gt; Nathaniel Nicandro &lt;nathanielnicandro@gmail.com&gt; writes: &gt; &gt;&gt; I would like to submit a patch that adds support for logind to &gt;

 Searching for the offending grace emails

 #+begin_src python :results output
   service = build('gmail', 'v1', credentials=credentials)
   search_window = today - timedelta(days=7)
   query = f'after:{search_window.strftime("%Y-%m-%d")} from:email_jl5aqQ4RC1w@rjmjhwxoanxdnbxcpydnynyvblpsok.ieedse.com'
  
   response = service.users().messages().list(userId='me', q=query).execute()
   messages = response.get('messages', None)
   message = messages[0]
   message_data = service.users().messages().get(userId='me', id=message['id']).execute()
   if any((1 for h in message_data.get('payload', {}).get('headers', [])
           if h['name'] in ('To', 'CC') \
               and re.search(r'\bGrace\w+@aol', h['value'], re.IGNORECASE ) )) \
      and not message_data.get('payload', {}).get('body', {}).get('size', 0):
      print('delete it')
   else:
      print('keep it')
 #+end_src

 #+RESULTS:
 : delete it

 I think that gives me what I need. Lets find all emails I'll be editing

 #+name: def/messages_to_spam
 #+begin_src python
   def messages_to_spam():
      today = datetime.today()
      search_window = today - timedelta(days=2)
      query = f'after:{search_window.strftime("%Y-%m-%d")} in:inbox'
      response = service.users().messages().list(userId='me', q=query).execute()
  
      for message in response.get('messages', []):
         message_data = service.users().messages().get(userId='me', id=message['id']).execute()
         if any((1 for h in message_data.get('payload', {}).get('headers', [])
               if h['name'] in ('To', 'CC') \
                 and re.search(r'\bGrace\w*@', h['value'], re.IGNORECASE ) )) \
                 and not message_data.get('payload', {}).get('body', {}).get('size', 0):
            yield message_data
 #+end_src

 #+begin_src python :results code
   import time
   start_time = time.time()
  
   service = build('gmail', 'v1', credentials=credentials)
  
   [next((h for h in message_data['payload']['headers'] if re.match(r'^subject$', h['name'], re.IGNORECASE)), 'no subject>>')
    for message_data in messages_to_spam()], ("execution time", str(time.time()-start_time))
 #+end_src

 #+RESULTS:
 #+begin_src python
 ([{'name': 'Subject', 'value': 'Doorbell video recording & free of installation &  up to 75% Off Now !!'}, {'name': 'Subject', 'value': '#FreeVideoDoorbell'}], ('execution time', '20.23447012901306'))
 #+end_src

 Ok, so lets try to delete those

 #+name: move-messages-to-spam
 #+begin_src python
   modification = {'removeLabelIds': ['INBOX'], 'addLabelIds': ['SPAM']}
   for message_data in messages_to_spam():
       print(f'Modifying message {message_data["id"]}')
       service.users().messages().modify(userId='me', id=message_data['id'], body=modification).execute()
 #+end_src
 #+begin_src python
  <<move-messages-to-spam>>
  [next((h for h in
         message_data['payload']['headers'] if re.match(r'^subject$', h['name'], re.IGNORECASE)
         ), '<<no subject>>')
   for message_data in messages_to_spam()] \
  , ("execution time", str(time.time()-start_time))
 #+end_src

 #+RESULTS:
 | execution time | 402.5851867198944 |

 That worked - I got the execution time wrong but it seemed to take about a minute 

 The only thing remaining is that the credentials in this case are in-memory, not in a file. Lets write them out there

 #+begin_src python :results silent
   with open('./.credentials/gmauer-credentials.json', 'w') as fd:
       fd.write(credentials.to_json())
 #+end_src

 And are credentials loaded the same way?
 #+begin_src python
   Credentials.from_authorized_user_file('./.credentials/gmauer-credentials.json')
 #+end_src

 #+RESULTS:
 : <google.oauth2.credentials.Credentials object at 0x7fee30cdc640>

 Yup they are

** Final script
  
   The below will be written to [[./clean_gmail.py]]
   
   #+begin_src python :tangle clean_gmail.py :eval no :noweb yes
  import time
  import re
  from datetime import datetime, timedelta
  from google.oauth2.credentials import Credentials
  from googleapiclient.discovery import build
  
  credentials = Credentials.from_authorized_user_file('./.credentials/gmauer-credentials.json')
  service = build('gmail', 'v1', credentials=credentials)
  
  <<def/messages_to_spam>>
  
  start_time = time.time()
  
  <<move-messages-to-spam>>
  
  print(f'Done in {time.time() - start_time}')
   #+end_src

And we can test it locally really quick
#+begin_src emacs-lisp :results silent
  (async-shell-command "pyenv exec poetry run python ./clean_gmail.py")
#+end_src

