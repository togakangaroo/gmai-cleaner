This is a program intended to be used in a personal capacity to clean your gmail.

I personally have a problem where I am on some sort of spam list that sends me 3-10 emails per day for someone named "Grace" that contain just a single image. There is no good way to filter these directly in gmail.

Well, I know python and I have a Raspberry Pi so I guess I can just write a script to clean my gmail occasionally

As most of my small projects nowadays I use an ai chatbot for the coding assist (who even wants to look up API details?) I'm going to keep track of them here.
* Setup
  #+begin_src emacs-lisp :results silent
  (async-shell-command "pyenv exec poetry install")
  #+end_src
* Playground
  :PROPERTIES:
  :header-args:python: :python "pyenv exec poetry run python"
  :header-args:python+: :session gmail-cleaner
  :END:
  
  Can all the things from the ai-generated script even be imported?
  #+begin_src python
  import os
  import base64
  from datetime import datetime, timedelta
  from google.oauth2.credentials import Credentials
  from googleapiclient.errors import HttpError
  from googleapiclient.discovery import build
  import google.oauth2
  import jso
  #+end_src

#+RESULTS:

Ok good

Now lets try this out
#+begin_src python :results silent
  import os
  import google_auth_oauthlib.flow
  
  os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'
  
  client_secret_file = '.credentials/client_secret_771558906441-rt222sgbqf9rdresq9jebuj9gqqeh6i6.apps.googleusercontent.com.json'
  scopes = ['https://www.googleapis.com/auth/gmail.modify']
  
  flow = google_auth_oauthlib.flow.InstalledAppFlow.from_client_secrets_file(client_secret_file, scopes)
  credentials = flow.run_local_server(port=0)
#+end_src


#+begin_src python
  service = build('gmail', 'v1', credentials=credentials)
  
  today = datetime.today()
  last_week = today - timedelta(days=7)
  query = 'is:unread after:{} before:{} has:attachment'.format(last_week.strftime('%Y/%m/%d'), today.strftime('%Y/%m/%d'))
  
  response = service.users().messages().list(userId='me', q=query).execute()
  messages = response.get('messages', None)
  
  msg = service.users().messages().get(userId='me', id=message['id']).execute()
  msg['snippet']
#+end_src

#+RESULTS:
: Ihor Radchenko &lt;yantar92@posteo.net&gt; writes: &gt; Nathaniel Nicandro &lt;nathanielnicandro@gmail.com&gt; writes: &gt; &gt;&gt; I would like to submit a patch that adds support for logind to &gt;
