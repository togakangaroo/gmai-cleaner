This is a program intended to be used in a personal capacity to clean your gmail.

I personally have a problem where I am on some sort of spam list that sends me 3-10 emails per day for someone named "Grace" that contain just a single image. There is no good way to filter these directly in gmail.

Well, I know python and I have a Raspberry Pi so I guess I can just write a script to clean my gmail occasionally

As most of my small projects nowadays I use an ai chatbot for the coding assist (who even wants to look up API details?) I'm going to keep track of them here.
* Setup
  #+begin_src emacs-lisp :results silent
  (async-shell-command "pyenv exec poetry install")
  #+end_src
* Code
  :PROPERTIES:
  :header-args:python: :python "pyenv exec poetry run python"
  :header-args:python+: :noweb strip-exports :comments link
  :END:
  
** Playground
   :PROPERTIES:
   :header-args:python+: :session gmail-cleaner
   :END:
  
   Can all the things from the ai-generated script even be imported?
   #+name: playground/all-imports
   #+begin_src python :results silent
   import os
   import base64
   from datetime import datetime, timedelta
   from google.oauth2.credentials import Credentials
   from googleapiclient.errors import HttpError
   from googleapiclient.discovery import build
   import google.oauth2
   import json
   #+end_src

 Ok good

 Now lets try this out
   #+name: playground/authenticate
 #+begin_src python :results silent
   import os
   import google_auth_oauthlib.flow
  
   os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'
  
   client_secret_file = '.credentials/client_secret_771558906441-rt222sgbqf9rdresq9jebuj9gqqeh6i6.apps.googleusercontent.com.json'
   scopes = ['https://www.googleapis.com/auth/gmail.modify']
  
   flow = google_auth_oauthlib.flow.InstalledAppFlow.from_client_secrets_file(client_secret_file, scopes)
   credentials = flow.run_local_server(port=0)
 #+end_src


 #+begin_src python
   service = build('gmail', 'v1', credentials=credentials)
  
   today = datetime.today()
   search_window = today - timedelta(days=7)
   query = 'is:unread after:{} before:{} has:attachment'.format(search_window.strftime('%Y/%m/%d'), today.strftime('%Y/%m/%d'))
  
   response = service.users().messages().list(userId='me', q=query).execute()
   messages = response.get('messages', [])
   message = messages[0]
   msg = service.users().messages().get(userId='me', id=message['id']).execute()
   msg['snippet']
 #+end_src

 #+RESULTS:
 : Now I found this, a roll dice with hydra interface 4:39 and many more ideas: https://emacsconf.org/2023/talks/solo/

 Searching for the offending grace emails

 #+begin_src python :results output
   service = build('gmail', 'v1', credentials=credentials)
   search_window = today - timedelta(days=7)
   query = f'after:{search_window.strftime("%Y-%m-%d")} from:email_jl5aqQ4RC1w@rjmjhwxoanxdnbxcpydnynyvblpsok.ieedse.com'
  
   response = service.users().messages().list(userId='me', q=query).execute()
   messages = response.get('messages', None)
   message = messages[0]
   message_data = service.users().messages().get(userId='me', id=message['id']).execute()
   if any((1 for h in message_data.get('payload', {}).get('headers', [])
           if h['name'] in ('To', 'CC') \
               and re.search(r'\bGrace\w+@aol', h['value'], re.IGNORECASE ) )) \
      and not message_data.get('payload', {}).get('body', {}).get('size', 0):
      print('delete it')
   else:
      print('keep it')
 #+end_src

 #+RESULTS:
 : delete it

 I think that gives me what I need. Lets find all emails I'll be editing

 #+name: def/messages_to_spam
 #+begin_src python
   def messages_to_spam():
      today = datetime.today()
      search_window = today - timedelta(days=2)
      query = f'after:{search_window.strftime("%Y-%m-%d")} in:inbox'
      response = service.users().messages().list(userId='me', q=query).execute()
  
      for message in response.get('messages', []):
         message_data = service.users().messages().get(userId='me', id=message['id']).execute()
         if any((1 for h in message_data.get('payload', {}).get('headers', [])
               if h['name'] in ('To', 'CC') \
                 and re.search(r'\bGrace\w*@', h['value'], re.IGNORECASE ) )) \
                 and not message_data.get('payload', {}).get('body', {}).get('size', 0):
            yield message_data
 #+end_src

 #+begin_src python :results code
   import time
   start_time = time.time()
  
   service = build('gmail', 'v1', credentials=credentials)
  
   [next((h for h in message_data['payload']['headers'] if re.match(r'^subject$', h['name'], re.IGNORECASE)), 'no subject>>')
    for message_data in messages_to_spam()], ("execution time", str(time.time()-start_time))
 #+end_src

 #+RESULTS:
 #+begin_src python
 ([{'name': 'Subject', 'value': 'Doorbell video recording & free of installation &  up to 75% Off Now !!'}, {'name': 'Subject', 'value': '#FreeVideoDoorbell'}], ('execution time', '20.23447012901306'))
 #+end_src

 Ok, so lets try to delete those

 #+name: move-messages-to-spam
 #+begin_src python
   modification = {'removeLabelIds': ['INBOX'], 'addLabelIds': ['SPAM']}
   for message_data in messages_to_spam():
       print(f'Modifying message {message_data["id"]}')
       service.users().messages().modify(userId='me', id=message_data['id'], body=modification).execute()
 #+end_src
 #+begin_src python
  <<move-messages-to-spam>>
  [next((h for h in
         message_data['payload']['headers'] if re.match(r'^subject$', h['name'], re.IGNORECASE)
         ), '<<no subject>>')
   for message_data in messages_to_spam()] \
  , ("execution time", str(time.time()-start_time))
 #+end_src

 #+RESULTS:
 | execution time | 402.5851867198944 |

 That worked - I got the execution time wrong but it seemed to take about a minute 

 The only thing remaining is that the credentials in this case are in-memory, not in a file. Lets write them out there

#+name: playground/save-credentials 
 #+begin_src python :results silent
   with open('./.credentials/gmauer-credentials.json', 'w') as fd:
       fd.write(credentials.to_json())
 #+end_src

 And are credentials loaded the same way?
 #+begin_src python
   Credentials.from_authorized_user_file('./.credentials/gmauer-credentials.json')
 #+end_src

 #+RESULTS:
 : <google.oauth2.credentials.Credentials object at 0x7fee30cdc640>

 Yup they are

** Final script
  
   The below will be written to [[./clean_gmail.py]]
   
   #+begin_src python :tangle clean_gmail.py :eval no :noweb yes
  import time
  import re
  from datetime import datetime, timedelta
  from google.oauth2.credentials import Credentials
  from googleapiclient.discovery import build
  
  credentials = Credentials.from_authorized_user_file('./.credentials/gmauer-credentials.json')
  service = build('gmail', 'v1', credentials=credentials)
  
  <<def/messages_to_spam>>
  
  start_time = time.time()
  
  <<move-messages-to-spam>>
  
  print(f'Done in {time.time() - start_time}')
   #+end_src

And we can test it locally really quick
#+begin_src emacs-lisp :results silent
  (async-shell-command "pyenv exec poetry run python ./clean_gmail.py")
#+end_src

** Troubleshooting - Credentials out of date
Lets look at the last few lines of the log

#+begin_src shell :dir /ssh:gmauer@192.168.1.6:/home/gmauer/ :results raw drawer
  tail -n 20 ~/clean_gmail.log
#+end_src

#+RESULTS:
:results:
  File "/home/gmauer/code/gmail-cleaner/clean_gmail.py", line 15, in messages_to_spam
    response = service.users().messages().list(userId='me', q=query).execute()
  File "/home/gmauer/.cache/pypoetry/virtualenvs/gmail-cleaner-LW7y0gbX-py3.9/lib/python3.9/site-packages/googleapiclient/_helpers.py", line 130, in positional_wrapper
    return wrapped(*args, **kwargs)
  File "/home/gmauer/.cache/pypoetry/virtualenvs/gmail-cleaner-LW7y0gbX-py3.9/lib/python3.9/site-packages/googleapiclient/http.py", line 923, in execute
    resp, content = _retry_request(
  File "/home/gmauer/.cache/pypoetry/virtualenvs/gmail-cleaner-LW7y0gbX-py3.9/lib/python3.9/site-packages/googleapiclient/http.py", line 191, in _retry_request
    resp, content = http.request(uri, method, *args, **kwargs)
  File "/home/gmauer/.cache/pypoetry/virtualenvs/gmail-cleaner-LW7y0gbX-py3.9/lib/python3.9/site-packages/google_auth_httplib2.py", line 209, in request
    self.credentials.before_request(self._request, method, uri, request_headers)
  File "/home/gmauer/.cache/pypoetry/virtualenvs/gmail-cleaner-LW7y0gbX-py3.9/lib/python3.9/site-packages/google/auth/credentials.py", line 135, in before_request
    self.refresh(request)
  File "/home/gmauer/.cache/pypoetry/virtualenvs/gmail-cleaner-LW7y0gbX-py3.9/lib/python3.9/site-packages/google/oauth2/credentials.py", line 335, in refresh
    ) = reauth.refresh_grant(
  File "/home/gmauer/.cache/pypoetry/virtualenvs/gmail-cleaner-LW7y0gbX-py3.9/lib/python3.9/site-packages/google/oauth2/reauth.py", line 349, in refresh_grant
    _client._handle_error_response(response_data, retryable_error)
  File "/home/gmauer/.cache/pypoetry/virtualenvs/gmail-cleaner-LW7y0gbX-py3.9/lib/python3.9/site-packages/google/oauth2/_client.py", line 69, in _handle_error_response
    raise exceptions.RefreshError(
google.auth.exceptions.RefreshError: ('invalid_grant: Bad Request', {'error': 'invalid_grant', 'error_description': 'Bad Request'})
Done in 15.410001993179321
:end:

If the above is an error with something like
#+begin_quote
google.auth.exceptions.RefreshError: ('invalid_grant: Bad Request', {'error': 'invalid_grant', 'error_description': 'Bad Request'})
#+end_quote

 then we need new credentials. Run this and click through till it says auth flow is done

 #+begin_src python :noweb yes :results silent
   <<playground/all-imports>>
   <<playground/authenticate>>
   <<playground/save-credentials>>
 #+end_src

Then copy things to the pi

#+begin_src emacs-lisp 
  (let ((target-dir "/ssh:gmauer@192.168.1.6:/home/gmauer/code/gmail-cleaner"))
    (copy-directory ".credentials" target-dir t)
    (copy-file "clean_gmail.py" target-dir)
    (copy-file "poetry.lock" target-dir)
    (copy-file "pyproject.toml" target-dir)
    (copy-file "README.org" target-dir))
#+end_src

lets try to run it once ont he server

#+begin_src shell :dir /ssh:gmauer@192.168.1.6:/home/gmauer/code/gmail-cleaner
  cd /home/gmauer/code/gmail-cleaner && /usr/bin/python -m poetry run python clean_gmail.py >> /home/gmauer/clean_gmail.log 2>&1
#+end_src

#+RESULTS:

* Deployment

I moved this directory onto my raspberry pi server and set a crontab

#+begin_src shell :dir /ssh:gmauer@192.168.1.6:/home/gmauer/code/gmail-cleaner
  crontab -l | grep clean_gmail
#+end_src

#+RESULTS:
: 20 */3 * * * cd /home/gmauer/code/gmail-cleaner && /usr/bin/python -m poetry run python clean_gmail.py >> /home/gmauer/clean_gmail.log 2>&1


[[/ssh:gmauer@192.168.1.6:/home/gmauer/clean_gmail.log][Here's the log]]

